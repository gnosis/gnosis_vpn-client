#!/bin/bash
#
# Gnosis VPN Post-Installation Script
#
# This script runs after the package payload is installed.
# It performs:
# - Configuration file generation (config.toml)
# - Backup of existing configuration (if present)
# - Final permission adjustments
# - Optional convenience symlinks
#
# Arguments:
#   $1: Full path to the installation package
#   $2: Full path to the installation destination (target volume)
#   $3: Mountpoint of the destination volume
#   $4: Root directory "/" for the current system
#
# Environment variables from Distribution.xml choices:
#   INSTALLER_CHOICE_NETWORK: "rotsee" or "dufour"

set -euo pipefail

# Configuration
CONFIG_DIR="${2}/etc/gnosisvpn"
CONFIG_FILE="${CONFIG_DIR}/config.toml"
BIN_DIR="${2}/usr/local/bin"
NETWORK="${INSTALLER_CHOICE_NETWORK:-rotsee}"

# Validate network selection (whitelist)
if [[ ! "$NETWORK" =~ ^(rotsee|dufour)$ ]]; then
    echo "ERROR: Invalid network selection: $NETWORK"
    echo "Valid options: rotsee, dufour"
    exit 1
fi

# Create log directory if it doesn't exist
LOG_DIR="/Library/Logs/GnosisVPNInstaller"
mkdir -p "$LOG_DIR"
LOG_FILE="${LOG_DIR}/postinstall.log"

# Redirect all output to log file
exec >> "$LOG_FILE" 2>&1

echo "=========================================="
echo "Gnosis VPN Post-Installation Script"
echo "=========================================="
echo "Started at: $(date)"
echo "Install package: $1"
echo "Target volume: $2"
echo "Binary directory: $BIN_DIR"
echo "Configuration directory: $CONFIG_DIR"
echo "Configuration file: $CONFIG_FILE"
echo "Network: $NETWORK"
echo ""

# Backup existing configuration if present
backup_config() {
    # Create config directory if it doesn't exist
    mkdir -p "$CONFIG_DIR"

    if [[ -f "$CONFIG_FILE" ]]; then
        local timestamp
        timestamp=$(date +%Y%m%d-%H%M%S)
        local backup_file="${CONFIG_DIR}/config-${timestamp}.toml.backup"

        echo "Existing configuration found. Creating backup..."
        if cp "$CONFIG_FILE" "$backup_file"; then
            echo "✓ Backup created: $backup_file"
        else
            echo "WARNING: Failed to create backup of existing config"
        fi
        echo ""
    fi
}

# Generate destinations configuration based on network selection
generate_destinations() {
    local destinations

    if [[ "$NETWORK" == "rotsee" ]]; then
        # Rotsee network destinations
        destinations='###
## destinations section - configure available target destinations
[destinations.0x7220CfE91F369bfE79F883c2891e97407D7a4D48]
meta = { location = "USA", state = "Iowa" }
# path = { intermediates = [ "0xFE3AF421afB84EED445c2B8f1892E3984D3e41eA" ] }
path = { hops = 0 }

[destinations.0xcD9D0E23cD999dFC0D1400D837F8e612DbbbDFAA]
meta = { location = "UK", city = "London" }
path = { intermediates = [ "0xc00B7d90463394eC29a080393fF09A2ED82a0F86" ] }
# path = { hops = 0 }'
    elif [[ "$NETWORK" == "dufour" ]]; then
        # Dufour network destinations
        destinations='###
## destinations section - configure available target destinations
[destinations.0xD9c11f07BfBC1914877d7395459223aFF9Dc2739]
meta = { location = "Germany" }
path = { intermediates = ["0xD88064F7023D5dA2Efa35eAD1602d5F5d86BB6BA"] }

[destinations.0xa5Ca174Ef94403d6162a969341a61baeA48F57F8]
meta = { location = "USA" }
path = { intermediates = ["0x25865191AdDe377fd85E91566241178070F4797A"] }

[destinations.0x8a6E6200C9dE8d8F8D9b4c08F86500a2E3Fbf254]
meta = { location = "Spain" }
path = { intermediates = ["0x2Cf9E5951C9e60e01b579f654dF447087468fc04"] }

[destinations.0x9454fc1F54DC7682124BA2d153345f4F6b404A79]
meta = { location = "India" }
path = { intermediates = [ "0x652cDe234ec643De0E70Fb3a4415345D42bAc7B2" ] }'
    else
        # Default to rotsee if unknown network
        destinations='###
## destinations section - configure available target destinations
[destinations.0x7220CfE91F369bfE79F883c2891e97407D7a4D48]
meta = { location = "USA", state = "Iowa" }
# path = { intermediates = [ "0xFE3AF421afB84EED445c2B8f1892E3984D3e41eA" ] }
path = { hops = 0 }

[destinations.0xcD9D0E23cD999dFC0D1400D837F8e612DbbbDFAA]
meta = { location = "UK", city = "London" }
path = { intermediates = [ "0xc00B7d90463394eC29a080393fF09A2ED82a0F86" ] }
# path = { hops = 0 }'
    fi

    echo "$destinations"
}


# Generate the configuration file
generate_config() {
    echo "Generating configuration file..."

    local destinations
    destinations=$(generate_destinations)

    # Write configuration file
    cat > "$CONFIG_FILE" <<EOF
###
# Gnosis VPN service configuration file
#
# On unix the default config path is \`/etc/gnosisvpn/config.toml\`
# However you can override this by using \`GNOSISVPN_CONFIG_PATH\` env var
#
# Generated by installer on $(date)
# Network: $NETWORK
###

version = 4

${destinations}
EOF

    if [[ -f "$CONFIG_FILE" ]]; then
        echo "✓ Configuration file created: $CONFIG_FILE"
    else
        echo "ERROR: Failed to create configuration file"
        exit 1
    fi
    echo ""
}

# Set proper file permissions
set_permissions() {
    echo "Setting file permissions..."

    chmod 755 "$BIN_DIR/gnosis_vpn" 2>/dev/null || true
    chmod 755 "$BIN_DIR/gnosis_vpn-ctl" 2>/dev/null || true
    chmod 644 "$CONFIG_FILE" 2>/dev/null || true

    # Make the config directory readable by all users
    chmod 755 "$CONFIG_DIR" 2>/dev/null || true

    echo "✓ Permissions set"
    echo ""
}

# Verify binaries are in PATH
verify_path() {
    echo "Verifying binaries are in PATH..."

    # Binaries are already in /usr/local/bin which is typically in PATH
    echo "✓ Binaries installed to $BIN_DIR (typically in PATH)"
    echo "  You should be able to run 'gnosis_vpn' and 'gnosis_vpn-ctl' from anywhere"
    echo ""
}

# Verify installation
verify_installation() {
    echo "Verifying installation..."

    local errors=0

    if [[ ! -x "$BIN_DIR/gnosis_vpn" ]]; then
        echo "ERROR: gnosis_vpn binary not found or not executable"
        errors=$((errors + 1))
    fi

    if [[ ! -x "$BIN_DIR/gnosis_vpn-ctl" ]]; then
        echo "ERROR: gnosis_vpn-ctl binary not found or not executable"
        errors=$((errors + 1))
    fi

    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo "ERROR: Configuration file not found"
        errors=$((errors + 1))
    fi

    if [[ $errors -gt 0 ]]; then
        echo ""
        echo "Installation verification failed with $errors error(s)"
        exit 1
    fi

    echo "✓ Installation verified successfully"
    echo ""
}

# Print installation summary
print_summary() {
    echo "=========================================="
    echo "Installation Summary"
    echo "=========================================="
    echo "Binary directory: $BIN_DIR"
    echo "Configuration file: $CONFIG_FILE"
    echo "Network: $NETWORK"
    echo ""
    echo "Installed binaries:"
    ls -lh "$BIN_DIR"/gnosis_vpn* 2>/dev/null || true
    echo ""
    echo "To get started:"
    echo "  1. sudo gnosis_vpn -c $CONFIG_FILE"
    echo "  2. gnosis_vpn-ctl status"
    echo ""
    echo "Log file: $LOG_FILE"
    echo "=========================================="
    echo "Post-installation completed successfully!"
    echo "=========================================="
    echo ""
}

# Main execution
main() {
    backup_config
    generate_config
    set_permissions
    verify_path
    verify_installation
    print_summary
}

# Execute main function
main

exit 0
