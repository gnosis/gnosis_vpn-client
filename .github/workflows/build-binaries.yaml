#################################################################################
# Pipeline to build binaries
#################################################################################
name: Build binaries
on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      runner:
        required: true
        type: string
      architecture:
        required: true
        type: string
      version_type:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      runner:
        type: choice
        options:
          - ubuntu-24.04
          - macos-13
          - macos-15
        required: true
        description: "GH Runner to use: macos-13=x86_64-darwin and macos-15=aarch64-darwin"
      architecture:
        type: choice
        options:
          - x86_64-linux
          - aarch64-darwin
          - x86_64-darwin
        required: true
        description: "Architecture to build for"
concurrency:
  group: ${{ github.ref }}-build-binary-${{ inputs.architecture }}
  cancel-in-progress: true
jobs:
  binary:
    if: >-
      github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.action != 'closed' && contains(github.event.pull_request.labels.*.name, format('binary:{0}', inputs.architecture))) || (github.event_name == 'pull_request' && github.event.pull_request.merged)
    runs-on: ${{ github.event.inputs.runner || inputs.runner }}
    timeout-minutes: 90
    steps:
      - name: Set environment variables
        id: vars
        run: |
          declare branch architecture publish_type
          if [[ "${{ inputs.branch }}" != "" ]]; then
            echo "The workflow is triggered by other pipeline"
            # It can be triggered by the build, merge or release pipelines
            branch=${{ inputs.branch }}
            architecture=${{ inputs.architecture }}
          else
            echo "The workflow is triggered manually"
            branch=${{ github.ref_name }}
            architecture=${{ github.event.inputs.architecture }}
          fi
          echo "Invocation parameters:"
          echo "branch=${branch}" | tee -a $GITHUB_OUTPUT
          echo "architecture=${architecture}" | tee -a $GITHUB_OUTPUT
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.vars.outputs.branch }}
      - name: Install Nix
        uses: cachix/install-nix-action@v31
      - name: Use Nix Cache
        uses: cachix/cachix-action@v16
        with:
          name: gnosis-vpn-client
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
        env:
          USER: runner
      - name: Get PR labels
        id: pr-labels
        uses: joerick/pr-labels-action@0543b277721e852d821c6738d449f2f4dea03d5f # v1.0.9
      - name: Get version
        if: inputs.version_type != ''
        id: version
        run: |
          base_version=$(grep -E '^version\s*=' Cargo.toml | awk -F\" '{print $2}')
          if [[ "${{ inputs.version_type }}" == "commit" ]]; then
            bump_version=${base_version}+commit.$(git rev-parse --short HEAD)
            echo "binary_version=${bump_version}" | tee -a $GITHUB_OUTPUT
            if [ "${GITHUB_PR_LABEL_PUBLISH_COMMITS:-0}" == '1' ]; then
              echo "publish_type=artifact-registry" | tee -a $GITHUB_OUTPUT
            else
              echo "publish_type=workflow" | tee -a $GITHUB_OUTPUT
            fi
          elif [[ "${{ inputs.version_type }}" == "pr" ]]; then
            bump_version=${base_version}+pr.${{ github.event.pull_request.number }}
            echo "binary_version=${bump_version}" | tee -a $GITHUB_OUTPUT
            echo "publish_type=artifact-registry" | tee -a $GITHUB_OUTPUT
          elif [[ "${{ inputs.version_type }}" == "release" ]]; then
            bump_version=${base_version}
            echo "binary_version=${bump_version}" | tee -a $GITHUB_OUTPUT
            echo "publish_type=github" | tee -a $GITHUB_OUTPUT
          else
            echo "Invoked with unknown version_type (workflow dispatch), defaulting to commit-based versioning"
            echo "binary_version=${base_version}-commit.$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
            echo "publish_type=workflow" | tee -a $GITHUB_OUTPUT
          fi
          sed -i.bak -E "s/(^version = \")([0-9]+\.[0-9]+\.[0-9]+)(\")/\1${bump_version}\3/" Cargo.toml
          nix run .#generate-lockfile
          rm Cargo.toml.bak
      - name: Build binary ${{ steps.vars.outputs.architecture}}
        run: |
          nix build .#packages.${{ steps.vars.outputs.architecture}}.gvpn -L
          mkdir -p binaries
          cp ./result/bin/gnosis_vpn binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}}
          cp ./result/bin/gnosis_vpn-ctl binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}}
          if [[ "${{ inputs.version_type }}" == "commit" ]]; then
            mkdir -p binaries/upload
            cp binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}} binaries/upload/gnosis_vpn-${{ steps.vars.outputs.architecture}}-${{ steps.version.outputs.binary_version }}
            cp binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}} binaries/upload/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}}-${{ steps.version.outputs.binary_version }}
          fi
      - name: Sign binary on ${{ steps.vars.outputs.architecture}}
        if: inputs.version_type == 'release' && endsWith(steps.vars.outputs.architecture, '-darwin')
        run: |
          set -o errexit -o nounset -o pipefail
          echo "${{ secrets.APPLE_CERTIFICATE_DEVELOPER_P12_BASE64 }}" | base64 --decode > gnosisvpn-developer.p12
          KEYCHAIN_PASSWORD=$(openssl rand -base64 24)
          security create-keychain -p "${KEYCHAIN_PASSWORD}" build.keychain
          security default-keychain -s build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security list-keychains -d user -s build.keychain
          security unlock-keychain -p "${KEYCHAIN_PASSWORD}" build.keychain
          security import gnosisvpn-developer.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_DEVELOPER_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${KEYCHAIN_PASSWORD}" build.keychain
          security find-identity -v -p codesigning build.keychain
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain)
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          codesign --sign "${CERT_ID}" --options runtime --timestamp binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}}
          codesign --sign "${CERT_ID}" --options runtime --timestamp binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}}
          codesign --verify --deep --strict --verbose=4 binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}}
          codesign --verify --deep --strict --verbose=4 binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}}
          shasum -a 256 binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}} > binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}}.sha256
          shasum -a 256 binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}} > binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}}.sha256
      - name: Sign binary on ${{ steps.vars.outputs.architecture}}
        if: inputs.version_type == 'release' && endsWith(steps.vars.outputs.architecture, '-linux')
        run: |
          set -o errexit -o nounset -o pipefail
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --armor --output binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}}.asc --detach-sign binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}}
          shasum -a 256 binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}} > binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}}.sha256
          gpg --armor --output binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}}.asc --detach-sign binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}}
          shasum -a 256 binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}} > binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}}.sha256
      - name: Setup GCP
        if: steps.version.outputs.publish_type == 'artifact-registry' || steps.version.outputs.publish_type == 'github'
        uses: hoprnet/hopr-workflows/actions/setup-gcp@master
        with:
          google-credentials: ${{ secrets.GCP_SA_GITHUB_ACTIONS }}
          install-sdk: "true"
      - name: Publish Artifact registry
        if: steps.version.outputs.publish_type == 'artifact-registry' || steps.version.outputs.publish_type == 'github'
        run: |
          gcloud artifacts generic upload --location=europe-west3 --repository="rust-binaries" --version=${{ steps.version.outputs.binary_version }} --package=gnosis_vpn --source=binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}}
          gcloud artifacts generic upload --location=europe-west3 --repository="rust-binaries" --version=${{ steps.version.outputs.binary_version }} --package=gnosis_vpn --source=binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}}
          if [[ "${{ inputs.version_type }}" == "release" ]]; then
            gcloud artifacts generic upload --location=europe-west3 --repository="rust-binaries" --version=${{ steps.version.outputs.binary_version }} --package=gnosis_vpn --source=binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}}.sha256
            gcloud artifacts generic upload --location=europe-west3 --repository="rust-binaries" --version=${{ steps.version.outputs.binary_version }} --package=gnosis_vpn --source=binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}}.sha256
            if [[ "${{ steps.vars.outputs.architecture }}" == *-linux ]]; then
              gcloud artifacts generic upload --location=europe-west3 --repository="rust-binaries" --version=${{ steps.version.outputs.binary_version }} --package=gnosis_vpn --source=binaries/gnosis_vpn-${{ steps.vars.outputs.architecture}}.asc
              gcloud artifacts generic upload --location=europe-west3 --repository="rust-binaries" --version=${{ steps.version.outputs.binary_version }} --package=gnosis_vpn --source=binaries/gnosis_vpn-ctl-${{ steps.vars.outputs.architecture}}.asc
            fi
          fi

      - name: Upload ${{ steps.vars.outputs.architecture }} binaries
        if: steps.version.outputs.publish_type == 'workflow'
        uses: actions/upload-artifact@v5
        with:
          name: binary-${{ steps.vars.outputs.architecture }}
          path: ${{ github.workspace }}/binaries/upload/*
