name: Close release
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Next version type"
        required: true
        type: choice
        default: "patch"
        options:
          - patch
          - minor
          - major
concurrency:
  group: release
  cancel-in-progress: false
jobs:
  build-binaries:
    strategy:
      matrix:
        binary:
          - architecture: x86_64-linux
            runner: ubuntu-24.04
          - architecture: aarch64-darwin
            runner: macos-15
          - architecture: x86_64-darwin
            runner: macos-13
    name: Binary ${{ matrix.binary.architecture }}
    uses: ./.github/workflows/build-binaries.yaml
    with:
      branch: main
      runner: ${{ matrix.binary.runner }}
      architecture: ${{ matrix.binary.architecture }}
      version_type: "release"
    secrets: inherit
  release:
    name: Close release
    needs:
      - build-binaries
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup GCP
        id: gcp
        uses: hoprnet/hopr-workflows/actions/setup-gcp@master
        with:
          google-credentials: ${{ secrets.GCP_SA_GITHUB_ACTIONS }}
          install-sdk: "true"
      - name: Install Nix
        uses: cachix/install-nix-action@v31
      - name: Setup environment variables
        id: environment
        run: |
          release_version=$(grep -E '^version\s*=' Cargo.toml | awk -F\" '{print $2}')
          echo "release_version=${release_version}" >> $GITHUB_OUTPUT
      - name: Create release and publish binaries
        run: |
          architectures=("x86_64-linux" "aarch64-darwin" "x86_64-darwin" )
          mkdir -p binaries
          echo "Generating release notes"
          gh release create v${{ steps.environment.outputs.release_version }} --generate-notes
          echo "Preparing binaries for upload"
          for architecture in "${architectures[@]}"; do
              echo "Downloading from GCP binary for ${architecture}"
              gcloud artifacts files download --project=gnosisvpn-production --location=europe-west3 --repository=rust-binaries gnosis_vpn:${{ steps.environment.outputs.release_version }}:gnosis_vpn-${architecture} --destination=./binaries --local-filename=gnosis_vpn-${architecture}
              gcloud artifacts files download --project=gnosisvpn-production --location=europe-west3 --repository=rust-binaries gnosis_vpn:${{ steps.environment.outputs.release_version }}:gnosis_vpn-ctl-${architecture} --destination=./binaries --local-filename=gnosis_vpn-ctl-${architecture}
              echo "Uploading binary for ${architecture}"
              gh release upload v${{ steps.environment.outputs.release_version }} "$PWD/binaries/gnosis_vpn-${architecture}" --clobber
              gh release upload v${{ steps.environment.outputs.release_version }} "$PWD/binaries/gnosis_vpn-ctl-${architecture}" --clobber
              echo "Downloading signatures and checksums for ${architecture}"
              gcloud artifacts files download --project=gnosisvpn-production --location=europe-west3 --repository=rust-binaries gnosis_vpn:${{ steps.environment.outputs.release_version }}:gnosis_vpn-${architecture}.sig --destination=./binaries --local-filename=gnosis_vpn-${architecture}.sig
              gcloud artifacts files download --project=gnosisvpn-production --location=europe-west3 --repository=rust-binaries gnosis_vpn:${{ steps.environment.outputs.release_version }}:gnosis_vpn-${architecture}.sha256 --destination=./binaries --local-filename=gnosis_vpn-${architecture}.sha256
              gcloud artifacts files download --project=gnosisvpn-production --location=europe-west3 --repository=rust-binaries gnosis_vpn:${{ steps.environment.outputs.release_version }}:gnosis_vpn-${architecture}.sha256.asc --destination=./binaries --local-filename=gnosis_vpn-${architecture}.sha256.asc
              gcloud artifacts files download --project=gnosisvpn-production --location=europe-west3 --repository=rust-binaries gnosis_vpn:${{ steps.environment.outputs.release_version }}:gnosis_vpn-ctl-${architecture}.sig --destination=./binaries --local-filename=gnosis_vpn-ctl-${architecture}.sig
              gcloud artifacts files download --project=gnosisvpn-production --location=europe-west3 --repository=rust-binaries gnosis_vpn:${{ steps.environment.outputs.release_version }}:gnosis_vpn-ctl-${architecture}.sha256 --destination=./binaries --local-filename=gnosis_vpn-ctl-${architecture}.sha256
              gcloud artifacts files download --project=gnosisvpn-production --location=europe-west3 --repository=rust-binaries gnosis_vpn:${{ steps.environment.outputs.release_version }}:gnosis_vpn-ctl-${architecture}.sha256.asc --destination=./binaries --local-filename=gnosis_vpn-ctl-${architecture}.sha256.asc
              echo "Uploading signatures and checksums for ${architecture}"
              gh release upload v${{ steps.environment.outputs.release_version }} "$PWD/binaries/gnosis_vpn-${architecture}.sig" --clobber
              gh release upload v${{ steps.environment.outputs.release_version }} "$PWD/binaries/gnosis_vpn-${architecture}.sha256" --clobber
              gh release upload v${{ steps.environment.outputs.release_version }} "$PWD/binaries/gnosis_vpn-${architecture}.sha256.asc" --clobber
              gh release upload v${{ steps.environment.outputs.release_version }} "$PWD/binaries/gnosis_vpn-ctl-${architecture}.sig" --clobber
              gh release upload v${{ steps.environment.outputs.release_version }} "$PWD/binaries/gnosis_vpn-ctl-${architecture}.sha256" --clobber
              gh release upload v${{ steps.environment.outputs.release_version }} "$PWD/binaries/gnosis_vpn-ctl-${architecture}.sha256.asc" --clobber
          done
          echo "Release v${{ steps.environment.outputs.release_version }} created and binaries uploaded"
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Bump Version
        id: bump
        shell: bash
        run: |
          current_version=$(grep -E '^version\s*=' Cargo.toml | awk -F\" '{print $2}')
          # Extract parts without IFS or read
          IFS='.' read -r major_version minor_version patch_version <<< "${current_version}"
          echo "Current version $major_version $minor_version $patch_version"

          # Bump the appropriate part
          echo "Bumping ${{ inputs.release_type }} version"
          case "${{ inputs.release_type }}" in
              major)
                  major_version=$((major_version+1))
                  minor_version=0
                  patch_version=0
                  ;;
              minor)
                  minor_version=$((minor_version+1))
                  patch_version=0
                  ;;
              patch)
                  patch_version=$((patch_version+1))
                  ;;
              *)
                  echo "Invalid release type"
                  exit 1
                  ;;
          esac
          echo "New version: ${major_version}.${minor_version}.${patch_version}"

          bump_version="${major_version}.${minor_version}.${patch_version}"
          echo "Updating version from $current_version to $bump_version"

          # Update the version in Cargo.toml
          # capture group 1: version = "
          # capture group 2: the version number
          # capture group 3: "
          sed -i.bak -E "s/(^version = \")([0-9]+\.[0-9]+\.[0-9]+)(\")/\1${bump_version}\3/" Cargo.toml
          rm Cargo.toml.bak
          nix develop --command cargo generate-lockfile
          echo "bump_version=${bump_version}" >> $GITHUB_OUTPUT
          echo v${{ steps.environment.outputs.release_version }} > LATEST
          echo "LATEST updated to v${{ steps.environment.outputs.release_version }}"
      - uses: EndBug/add-and-commit@v9
        with:
          add: '["Cargo.*", "LATEST" ]'
          new_branch: main
          message: "Bump to version ${{ steps.bump.outputs.bump_version }}"
          pathspec_error_handling: exitImmediately
