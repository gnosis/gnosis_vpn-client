###
# Gnosis VPN service configuration file
#
# On Unix the default config path is `/etc/gnosisvpn/config.toml`
# However, you can override this by using the `GNOSISVPN_CONFIG_PATH` environment variable.
###

# general config file version
version = 1

###
## hoprd node section - your hoprd node that acts as the connection entry point
# [hoprd_node]

# # URL pointing to the API access of your hoprd node with scheme and port (e.g., `http://192.168.0.89:3001`)
# endpoint = "<your hoprd node API endpoint>"

# # API access token
# api_token = "<your hoprd node API token>"

# Container forwarded connection port â€“ if your hoprd node runs inside a Docker container,
# this should match the forwarded UDP port into the container.
# Note: This is NOT your API port, which must be specified in the `endpoint` field.
# This port is an additional port used to establish the tunnel connection on your hoprd node.
# In general, if you want to establish a connection on a specific port, simply provide that port here.
internal_connection_port = 1422

###
## connection section - connection configuration parameters
# # Copy this section from https://gnosisvpn.com/servers
# [connection]

# # The exit peer ID (where the connection should terminate)
# destination = "<exit node peer id>"

# # [OPTIONAL] internal connection features - defaults to [ "segmentation" ]
# # capabilities = [ "segmentation", "retransmission" ]
# # [OPTIONAL] listen host - specify the internal listen host on your hoprd node.
# # If you have a firewall running and can only use static ports, you need to adjust this setting.
# # It is best to only use the `internal_connection_port` from the [hoprd_node] section.
# # If listen_host is enabled, `internal_connection_port` is ignored.
# # listen_host = ":1422"

###
## [OPTIONAL] connection path section - limit auto pathing of hoprd

# # Caution: only intended for debugging purposes as it degrades security.
# [connection.path]
# # [OPTIONAL] hop - number of hops to take through the mixnet; defaults to 1.
# hop = 1
# # [OPTIONAL] specify a manual path through the mixnet - only available in debug mode.
# intermediates = [ "<intermediate node peer id>" ]

###
## [OPTIONAL] connection target section - where does the exit node connect to

# # This section holds the target information of the connection exit node.
# # Caution: leave this as is if you don't know what you're doing.
# [connection.target]
# # [OPTIONAL] target host of the connection exit without scheme; defaults to the localhost WireGuard endpoint.
# host = "172.17.0.1"
# # [OPTIONAL] target port of the connection exit; defaults to the default WireGuard port.
# port = 51820

###
## wireguard section - specific VPN-related settings

# # Caution: this section is experimental at best and will only work on Linux.
# # This section holds the WireGuard-specific settings.
# [wireguard]
# # Local interface IP; onboarding info will provide this.
# address = "10.34.0.8/32"
# # WireGuard server public peer ID; onboarding info will provide this.
# server_public_key = "<wg server public peer id>"

# # [OPTIONAL] determine which traffic will be routed through the VPN.
# # Defaults to internal subnet derivable from address (e.g., `x.x.0.0/9`).
# allowed_ips = "10.34.0.0/24"
# # [OPTIONAL] interface listen port for incoming connections; defaults to 51820.
# listen_port = 51820
# # [OPTIONAL] private WireGuard key - set this if you want to skip automatic key generation and provide your own private key.
# private_key = "<wg private key>"
# # [OPTIONAL] preshared server key - if the server provides this, set it here.
# preshared_key = "<wg preshared key>"
